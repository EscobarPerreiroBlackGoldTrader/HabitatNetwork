/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package habitatnetwork;

import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.StringTokenizer;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

import javax.swing.DefaultListModel;

/**
 *
 * @author iUser
 */
public class MainJFrame extends javax.swing.JFrame {
    
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        
        // необходим для получения фокуса после старта приложения
        // (иначе не будут работать кнопки)
        habitat1.requestFocusInWindow();
        
        conl = new ConsListner(habitat1);

        // канал для обратной связи
        conl.initPW(((jMyTextArea)jTextArea2).getWrite_Stream());
        
        
        // создание канала связи между потоками консоли и основного окна приложения
        ((jMyTextArea)jTextArea2).initPW(habitat1.getWr_Stream());
        
        //создание  экзекутора для консоли
        execConsole = Executors.newCachedThreadPool();
        execConsListener = Executors.newCachedThreadPool(); // для запуска прослушки консоли в отдельном потоке
        
        buttonGroup1.add(jRadioButton1);
        buttonGroup1.add(jRadioButton2);
        
        
        
        ff = new FileFilter() {

                @Override
                public boolean accept(File f) {
                       return f.getName().endsWith(extension);
                }

                @Override
                public String getDescription() {
                    return extension+" Файл с данными и настройками эмуляции";
                }
            };
        
        
        //jLabel1.setVisible(false);
        
        // ------- переделать на static при случае ------
        sMan = new SettingsMan();
        if( setGUIState(sMan.settings_load()) ){
            System.out.println("настройки успешно загружены");
        }
        // ----------------------------------------------
    }

    public void keys_state_InStart(/*boolean start*/){ // управляет enabled/disabled свойствами кнопок (пуск,пауза,стоп)
        jButton1.setEnabled(/*!start*/true); // инвертировать кнопку старт
        jButton2.setEnabled(/*start*/false);  // инвертировать кнопку стоп
        jButton3.setEnabled(/*start*/false);  // инвертировать кнопку пауза
    }
    
    public void keys_state_InProgress(){
        jButton1.setEnabled(false); // кнопка старт
        jButton2.setEnabled(true); // кнопка стоп 
        jButton3.setEnabled(true); // кнопка пауза
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jDialog1 = new javax.swing.JDialog();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jDialog2 = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new jMyTextArea(/*habitat1.getStream()*/);
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTabbedPane_TabInterface = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton_MotoSleepAwake = new javax.swing.JButton();
        jButton_CarSleepAwake = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox_MotoPrior = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jComboBox_CarPrior = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jButton_RefreshNet = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList_network_friends = new javax.swing.JList();
        jButton_exchange = new javax.swing.JButton();
        jLabel_infopath = new javax.swing.JLabel();
        habitat1 = new habitatnetwork.Habitat();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_File = new javax.swing.JMenu();
        jMenuItem_loadfile = new javax.swing.JMenuItem();
        jMenuItem_savefile = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu_sim = new javax.swing.JMenu();
        jMenuItem_startSim = new javax.swing.JMenuItem();
        jMenuItem_stopSim = new javax.swing.JMenuItem();
        jMenuItem_showhideTimer = new javax.swing.JMenuItem();
        jMenu_console = new javax.swing.JMenu();
        jMenuItem_consOpen = new javax.swing.JMenuItem();
        jMenu_Help = new javax.swing.JMenu();
        jMenuItem_About = new javax.swing.JMenuItem();

        jDialog1.setTitle("Результаты симуляции");
        jDialog1.setMinimumSize(new java.awt.Dimension(400, 300));
        jDialog1.setModal(true);
        jDialog1.setResizable(false);

        jButton4.setText("ОК");
        jButton4.setToolTipText("Завкршить симуляцию");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Отмена");
        jButton5.setToolTipText("Продолжить симуляцию");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(83, 83, 83))
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap())
        );

        jDialog2.setMinimumSize(new java.awt.Dimension(400, 300));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea2KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Симуляция");
        setBackground(new java.awt.Color(102, 204, 0));
        setForeground(java.awt.Color.pink);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jButton1.setText("Старт");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.setPreferredSize(new java.awt.Dimension(65, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Стоп");
        jButton2.setEnabled(false);
        jButton2.setPreferredSize(new java.awt.Dimension(65, 23));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Пауза");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jRadioButton1.setText("показать таймер");
        jRadioButton1.setName("показать_таймер"); // NOI18N
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setSelected(true);
        jRadioButton2.setText("скрыть таймер");
        jRadioButton2.setName("скрыть_таймер"); // NOI18N
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Информация");
        jCheckBox1.setToolTipText("Показывать сводную информацию при завершении симуляции");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jTabbedPane_TabInterface.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000" }));
        jComboBox3.setName("период_рождения_мс"); // NOI18N
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jLabel4.setText("Период рождения объектов. мс.");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "100%" }));
        jComboBox2.setSelectedIndex(2);
        jComboBox2.setName("вероятность_появления_мотоцикла"); // NOI18N
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Вероятность появления мотоцикла");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "100%" }));
        jComboBox1.setSelectedIndex(3);
        jComboBox1.setName("вероятность_появления_машины"); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Вероятность появления машины");
        jLabel2.setName(""); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
        );

        jTabbedPane_TabInterface.addTab("Генерация", jPanel4);

        jLabel1.setText("Усыпить/пробудить");

        jButton_MotoSleepAwake.setText("Спать");
        jButton_MotoSleepAwake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_MotoSleepAwakeActionPerformed(evt);
            }
        });

        jButton_CarSleepAwake.setText("Спать");
        jButton_CarSleepAwake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CarSleepAwakeActionPerformed(evt);
            }
        });

        jLabel8.setText("Мотоциклы");

        jLabel9.setText("Машины");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jButton_MotoSleepAwake)
                    .addComponent(jButton_CarSleepAwake)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(24, 24, 24)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_MotoSleepAwake)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_CarSleepAwake)
                .addContainerGap(172, Short.MAX_VALUE))
        );

        jTabbedPane_TabInterface.addTab("Заморозка", jPanel3);

        jLabel5.setText("Мотоцикл");

        jComboBox_MotoPrior.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jComboBox_MotoPrior.setName("мотоцикл_приоритет"); // NOI18N
        jComboBox_MotoPrior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_MotoPriorActionPerformed(evt);
            }
        });

        jLabel6.setText("Машина");

        jComboBox_CarPrior.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jComboBox_CarPrior.setName("машина_приоритет"); // NOI18N
        jComboBox_CarPrior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_CarPriorActionPerformed(evt);
            }
        });

        jLabel7.setText("Приоритет потоков");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox_MotoPrior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox_CarPrior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox_MotoPrior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox_CarPrior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(177, Short.MAX_VALUE))
        );

        jTabbedPane_TabInterface.addTab("Приоритет", jPanel2);

        jPanel5.setMaximumSize(new java.awt.Dimension(50, 200));
        jPanel5.setPreferredSize(new java.awt.Dimension(50, 200));

        jButton_RefreshNet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/habitatnetwork/52.png"))); // NOI18N
        jButton_RefreshNet.setToolTipText("обновить список");
        jButton_RefreshNet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RefreshNetActionPerformed(evt);
            }
        });

        jScrollPane5.setViewportView(jList_network_friends);

        jButton_exchange.setText("Обмен");
        jButton_exchange.setToolTipText("Обменяться объектами");
        jButton_exchange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_exchangeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton_exchange)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addComponent(jButton_RefreshNet, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton_exchange, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_RefreshNet))
                .addContainerGap())
        );

        jTabbedPane_TabInterface.addTab("Сеть", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jRadioButton2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton1))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(jTabbedPane_TabInterface, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane_TabInterface)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout habitat1Layout = new javax.swing.GroupLayout(habitat1);
        habitat1.setLayout(habitat1Layout);
        habitat1Layout.setHorizontalGroup(
            habitat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        habitat1Layout.setVerticalGroup(
            habitat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu_File.setText("Файл");

        jMenuItem_loadfile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/habitatnetwork/xToon Icon 01.png"))); // NOI18N
        jMenuItem_loadfile.setText("Загрузить...");
        jMenuItem_loadfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_loadfileActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_loadfile);

        jMenuItem_savefile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/habitatnetwork/xToon Icon 32.png"))); // NOI18N
        jMenuItem_savefile.setText("Сохранить...");
        jMenuItem_savefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_savefileActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_savefile);
        jMenu_File.add(jSeparator1);

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/habitatnetwork/223.png"))); // NOI18N
        jMenuItem1.setText("Выход");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem1);

        jMenuBar1.add(jMenu_File);

        jMenu_sim.setText("Симуляция");

        jMenuItem_startSim.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, 0));
        jMenuItem_startSim.setText("Начать симуляцию");
        jMenuItem_startSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_startSimActionPerformed(evt);
            }
        });
        jMenu_sim.add(jMenuItem_startSim);

        jMenuItem_stopSim.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, 0));
        jMenuItem_stopSim.setText("Остановить симуляцию");
        jMenuItem_stopSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_stopSimActionPerformed(evt);
            }
        });
        jMenu_sim.add(jMenuItem_stopSim);

        jMenuItem_showhideTimer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, 0));
        jMenuItem_showhideTimer.setText("Показать/Скрыть таймер ");
        jMenuItem_showhideTimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_showhideTimerActionPerformed(evt);
            }
        });
        jMenu_sim.add(jMenuItem_showhideTimer);

        jMenuBar1.add(jMenu_sim);

        jMenu_console.setText("Консоль");

        jMenuItem_consOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/habitatnetwork/xToon Icon 57.png"))); // NOI18N
        jMenuItem_consOpen.setText("Открыть...");
        jMenuItem_consOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_consOpenActionPerformed(evt);
            }
        });
        jMenu_console.add(jMenuItem_consOpen);

        jMenuBar1.add(jMenu_console);

        jMenu_Help.setText("Помощь");

        jMenuItem_About.setText("О программе...");
        jMenuItem_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_AboutActionPerformed(evt);
            }
        });
        jMenu_Help.add(jMenuItem_About);

        jMenuBar1.add(jMenu_Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_infopath, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                    .addComponent(habitat1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(habitat1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel_infopath, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_AboutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem_AboutActionPerformed

    private void jMenuItem_startSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_startSimActionPerformed
        // TODO add your handling code here:
        habitat1.start_sim();
        keys_state_InProgress();
    }//GEN-LAST:event_jMenuItem_startSimActionPerformed

    private void habitat1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_habitat1KeyPressed
        // TODO add your handling code here:
        
        int keycode = evt.getKeyCode();
        switch(keycode){
                case KeyEvent.VK_B: // запустить симуляцию
                    //jLabel1.setText("B is pressed");
                    habitat1.start_sim();
                    keys_state_InProgress();
                    /*jButton1.setEnabled(false); // погасить кнопку старт
                    jButton2.setEnabled(true);  // активировать кнопку стоп
                    jButton3.setEnabled(true);  // активировать кнопку пауза*/
                    
                    break;
                case KeyEvent.VK_E: //остановить симуляцию
                    //jLabel1.setText("E is pressed");
                    habitat1.stop_sim();
                    /*jButton1.setEnabled(true); // активировать кнопку старт
                    jButton2.setEnabled(false);  // погасить кнопку стоп
                    jButton3.setEnabled(false);  // погасить кнопку пауза*/
                    keys_state_InStart(); 
                    break;
                case KeyEvent.VK_T: //показать/скрыть таймер
                    //jLabel1.setText("T is pressed");
                    if(habitat1.trig_timer()){
                        // если показ таймера включен
                        //jRadioButton1.setSelected(false);
                        jRadioButton2.setSelected(true);
                    }else{
                        // если показ таймера отключен
                        jRadioButton1.setSelected(true);
                        //jRadioButton2.setSelected(false);
                    }
                    
                    break;
        }
    }//GEN-LAST:event_habitat1KeyPressed

    private void habitat1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_habitat1MouseClicked
        // TODO add your handling code here:
        //jLabel1.setText("mouse is clicked");
    }//GEN-LAST:event_habitat1MouseClicked

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        // TODO add your handling code here:
        //jLabel1.setText("Key in JFrame is pressed");
    }//GEN-LAST:event_formKeyTyped

    private void jMenuItem_stopSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_stopSimActionPerformed
        // TODO add your handling code here:
        habitat1.stop_sim();
        keys_state_InStart();
    }//GEN-LAST:event_jMenuItem_stopSimActionPerformed

    private void jMenuItem_showhideTimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_showhideTimerActionPerformed
        // TODO add your handling code here:
        if(habitat1.trig_timer()){
                        // если показ таймера включен
            jRadioButton1.setSelected(true);
            
        }else{
                        // если показ таймера отключен
            jRadioButton2.setSelected(true);
            
        }
        
    }//GEN-LAST:event_jMenuItem_showhideTimerActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Отмена в диалоге
        done = false;
        jDialog1.setVisible(false);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // OK в диалоге
        done = true;
        jDialog1.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // выбор периода обновления
        Object o = jComboBox3.getSelectedItem();
        int ii = Integer.parseInt((String)o);
        //jLabel4.setText(Integer.toString(ii));
        habitat1.set_period(ii);

    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        Object o = jComboBox2.getSelectedItem();
        String s = (String)o;
        //jLabel1.setText(s); // просто посмотреть

        habitat1.setP_moto(s);

    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        Object o = jComboBox1.getSelectedItem();
        String s = (String)o;
        //jLabel1.setText(s); // просто посмотреть

        habitat1.setP_car(s);

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        habitat1.set_timer_show(false);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        habitat1.set_timer_show(true);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Кнопка Пауза
        if(habitat1.pause_sim()){
            jButton3.setText("Пауза");
        }else{
            jButton3.setText("Продолжить");
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Стоп
        if(jCheckBox1.isSelected()){ // если разрешено показывать диалог
            habitat1.hold_sim();
            jTextArea1.setText(habitat1.getStatistic());
            jDialog1.setVisible(true);

            if(done){ // смотрим - что нажал пользователь в диалоге
                // нажал ОК - тогда заканчиваем симуляцию
                jDialog1.dispose();
                habitat1.stop_sim();
                keys_state_InStart();
                jButton3.setText("Пауза"); // возвращает состояние кнопки пауза в исходное

            }else{
                // нажал Отмена - продолжаем симуляцию
                habitat1.unhold_sim();
            }

        }else{ // если птичка jCheckBox1 не нажата

            habitat1.stop_sim();
            keys_state_InStart();
            jButton3.setText("Пауза"); // возвращает состояние кнопки пауза в исходное
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Старт:
        habitat1.start_sim();
        keys_state_InProgress();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton_MotoSleepAwakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_MotoSleepAwakeActionPerformed

        boolean pm = habitat1.isPausedMoto();
        
        if(pm){
            jButton_MotoSleepAwake.setText("Спать");
            habitat1.unfreezeMoto();            
        }else{
            jButton_MotoSleepAwake.setText("Проснуться");
                       
        }
        
        // инверсия переменной сигнализирующеу всем потокам Мотоциклов
        // о необходимости замереть и ждать( до вызова unfreezeMoto() )
        habitat1.setPausedMoto(!pm);

    }//GEN-LAST:event_jButton_MotoSleepAwakeActionPerformed

    private void jButton_CarSleepAwakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CarSleepAwakeActionPerformed
        // TODO add your handling code here:
        boolean pc = habitat1.isPausedCar();
        
        if(pc){
            jButton_CarSleepAwake.setText("Спать");
            habitat1.unfreezeCar();
        }else{
            jButton_CarSleepAwake.setText("Проснуться");
        }
                
        habitat1.setPausedCar(!pc);//инверсия
        
        
    }//GEN-LAST:event_jButton_CarSleepAwakeActionPerformed

    private void jComboBox_MotoPriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_MotoPriorActionPerformed
        int prior = Integer.parseInt(jComboBox_MotoPrior.getSelectedItem().toString());
        habitat1.setMotoPriority(prior);
    }//GEN-LAST:event_jComboBox_MotoPriorActionPerformed

    private void jComboBox_CarPriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_CarPriorActionPerformed
        int prior = Integer.parseInt(jComboBox_CarPrior.getSelectedItem().toString());
        habitat1.setCarPriority(prior);
    }//GEN-LAST:event_jComboBox_CarPriorActionPerformed

    private void jMenuItem_consOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_consOpenActionPerformed
        // Консоль->Открыть..
        //jTextArea2.setText("localhost#");
        jDialog2.setVisible(true);
        
        
        if(ct == null){ // если указатель на поток консоли пуст
            ct = new Thread(((jMyTextArea)jTextArea2)); // создать поток консоли
            execConsole.execute(ct);// начать выполнение консоли в новом потоке
        }
        
        if(clt == null){
            clt = new Thread(conl);
            execConsListener.execute(clt);
        }
            
        
        
        //((jMyTextArea)jTextArea2).run();/**/
        //habitat1.write_to_console(null);
        
    }//GEN-LAST:event_jMenuItem_consOpenActionPerformed

    private void jMenuItem_loadfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_loadfileActionPerformed
        // загрузить настройки и результаты симуляции из файла
        
        if(habitat1.isEmul_progress())habitat1.pause_sim(); // если идёт симуляция - приостановить
        
        if(fdl == null){// создать диалог выбора файла если ещё не создан
            fdl = new JFileChooser();
            fdl.resetChoosableFileFilters();
            fdl.addChoosableFileFilter(ff);
            fdl.setFileFilter(ff);
            
        }
        int result = fdl.showOpenDialog(/*jLabel1*/this); // 
        
        switch(result){
            case JFileChooser.APPROVE_OPTION:
                
                File selectedFile = fdl.getSelectedFile();
                
        
                try {
                    ObjectInputStream ois = new ObjectInputStream(new FileInputStream(selectedFile));
                    
                    try {
                        
//                        BaseAI p = (BaseAI)ois.readObject();
//                        habitat1.lst = (CopyOnWriteArrayList<BaseAI>)ois.readObject();
                          
                          habitat1.lst = (/*Habitat*/CopyOnWriteArrayList<BaseAI>)ois.readObject();
                        /*
                          if(habitat1.lst == null){
                              habitat1.lst = new CopyOnWriteArrayList<BaseAI>();
                          }else{
                              habitat1.lst.clear();
                          }
                          Object o = null;
                          while(selectedFile.){
                            o = ois.readObject();
                           System.out.println(o.getClass());
                              
                            habitat1.lst.add((BaseAI)o);
                          }
//                        habitat1.lst.add(1, p);
                        */
                    } catch (ClassNotFoundException ex) {
                        System.out.println("случилось страшное при загрузке - ClassNotFoundException");
                        Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    ois.close();
                    
                } catch (IOException ex) {
                    System.out.println("случилось страшное при загрузке - IOException");
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                //-------------- восстановление остальных необходимых данных ----------------
                
                int mc=0,cc=0;
                
                for(Iterator<BaseAI> it = habitat1.lst.iterator();it.hasNext();){
                    BaseAI next = it.next();
                    if(next instanceof Car){
                        System.out.println("Im Find a Car in lst in load time");
                        ++cc;
                    }
                    else if(next instanceof Moto){
                        System.out.println("Im Find a Moto in lst in load time");
                        ++mc;
                    }
                    else System.out.println("Im Find BaseAI - sorry!!! >_< ");
                }
                
                habitat1.setVel_count(habitat1.lst.size());
                habitat1.setCar_count(cc);
                habitat1.setMoto_count(mc);
                //---------------------------------------------------------------------------
                
                habitat1.repaint();
                
                //keys_state_InStart(true);
                //this.jButton3.doClick(); //не срабатывает
                
                break;
            case JFileChooser.CANCEL_OPTION:
                jLabel_infopath.setText("загрузка отменена");
                // если была приостанровлена симуляция - возобновить
                if(!habitat1.isEmul_progress())habitat1.pause_sim(); 

                break;
            case JFileChooser.ERROR_OPTION:
                jLabel_infopath.setText("ошибочка загрузочки");
                break;
        }
        
    }//GEN-LAST:event_jMenuItem_loadfileActionPerformed

    private void jTextArea2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea2KeyPressed
        // нажали Enter в консоли
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String s = jTextArea2.getText();
            s = s + "\n\n";
            jTextArea2.setText(null);
            ((jMyTextArea)jTextArea2).write_to_ConsListener(s);
        }
    }//GEN-LAST:event_jTextArea2KeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // перед закрытием - сохраняем настройки
        System.out.println("Настроечки надо сохранить");
        
        sMan.settings_save(getGUIState());
        
    }//GEN-LAST:event_formWindowClosing

    private void jButton_RefreshNetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RefreshNetActionPerformed
        
        if(NW_Client == null){
            try {
                NW_Client = new NetworkClient(21285,"localhost",System.in, "Lunohod" /*+ (new Random()).nextInt(10000)*/,habitat1,this);
                
            } catch (IOException ex) {
                DefaultListModel model = new DefaultListModel();
                model.addElement("нет подходящих серверов в обозримом пространстве");
                jList_network_friends.setModel(model);
                System.out.println("нет коннехту, объект нетворкклиент не создан " + NW_Client);
            }
            
        }
        
        try {
            //NW_Client.check_svyaz();
            NW_Client.establishConnect();
            
        } catch (IOException ex) {
            System.out.println("*********************NW_Client*************************");
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        renewFriendsList(NW_Client.getFriendsList(), NW_Client.getCld()); //обновление отображения в воджете
        
        //jList_network_friends.setLayoutOrientation(JList.VERTICAL_WRAP);
        //jList_network_friends.setVisibleRowCount(0);
        //ш-дфдфш-дфдфш
        
    }//GEN-LAST:event_jButton_RefreshNetActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        this.formWindowClosing(null);
        System.exit(0);// наверное так не правильно, попробовать переделать
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem_savefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_savefileActionPerformed
        // сохранить настройки и результаты симуляции в файл

        if(habitat1.isEmul_progress())habitat1.pause_sim();

        if(fds == null){
            fds = new JFileChooser();
            fds.resetChoosableFileFilters();
            fds.addChoosableFileFilter(ff);
            fds.setFileFilter(ff);

            //fds.setFileFilter(new FileNameExtensionFilter("txt", extensions);
            }

            switch(fds.showSaveDialog(/*jLabel1*/this)){
                case JFileChooser.APPROVE_OPTION:

                //                String filename = fds.getSelectedFile().getName();
                //                String dir = fds.getCurrentDirectory().toString();
                File selectedFile = fds.getSelectedFile();

                try {
                    System.out.println("Создаём OOS");
                    ObjectOutputStream oos =
                    new ObjectOutputStream(new FileOutputStream(selectedFile.getAbsolutePath()+extension));
                    System.out.println("Начинаем запись");

                    //                    for(Iterator<BaseAI> it = habitat1.lst.iterator();it.hasNext();){
                        //                        oos.writeObject(it.next());
                        //                    }

                    // планировалось, что будет работать

                    oos.writeObject(habitat1.lst);//serialization - сериализация

                    System.out.println("Начинаем flush()");
                    oos.flush();
                    oos.close();

                    //                    try {
                        //                        Thread.sleep(3000);
                        //                    } catch (InterruptedException ex) {
                        //                       Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        //                    }

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    System.out.println("случилось страшное при сохранении - IOException");
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

                String msg = "Результаты симуляции и настройки программы сохранены в файл:   ";
                jLabel_infopath.setFont(new Font("Arial", Font.BOLD, 12));
                jLabel_infopath.setText(msg+selectedFile.getAbsolutePath()+extension);

                // остановка
                habitat1.pause_sim();//отжать паузу
                habitat1.stop_sim();
                keys_state_InStart();
                //jButton3.setText("Пауза"); // возвращает состояние кнопки пауза в исходное
                break;
                //--------------------------------------------------------------
                case JFileChooser.CANCEL_OPTION:
                jLabel_infopath.setText("сохраненьице отменено");
                // если была приостанровлена симуляция - возобновить
                if(!habitat1.isEmul_progress())habitat1.pause_sim();
                break;
                //--------------------------------------------------------------    
                case JFileChooser.ERROR_OPTION:
                jLabel_infopath.setText("ошибочка сохраненьица");
                break;
            }

    }//GEN-LAST:event_jMenuItem_savefileActionPerformed

    private void jButton_exchangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_exchangeActionPerformed
        // Здесь процедура обмена
        //получить выбранный в листе элемент
        String sVal = (String)jList_network_friends.getSelectedValue();
//        System.out.println(sVal);
//        System.out.println("**************************\n"+sVal.getClass());
        
        NW_Client.exchangeData(sVal);
        
        
        
        
    }//GEN-LAST:event_jButton_exchangeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    private boolean done = false;
    
    JFileChooser fds;
    JFileChooser fdl;
    
    FileFilter ff ;
    String extension = ".emd";
    
    private Thread ct; // ссылка на поток в котором выполняется консоль
    private Thread clt; // ссылка на поток в котором выполняется прослушивальщик консоли
    private ExecutorService execConsole;
    private ExecutorService execConsListener;
    private ConsListner conl;
    
    private final SettingsMan sMan;
    
    private NetworkClient NW_Client;
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private habitatnetwork.Habitat habitat1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton_CarSleepAwake;
    private javax.swing.JButton jButton_MotoSleepAwake;
    private javax.swing.JButton jButton_RefreshNet;
    private javax.swing.JButton jButton_exchange;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox_CarPrior;
    private javax.swing.JComboBox jComboBox_MotoPrior;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_infopath;
    private javax.swing.JList jList_network_friends;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem_About;
    private javax.swing.JMenuItem jMenuItem_consOpen;
    private javax.swing.JMenuItem jMenuItem_loadfile;
    private javax.swing.JMenuItem jMenuItem_savefile;
    private javax.swing.JMenuItem jMenuItem_showhideTimer;
    private javax.swing.JMenuItem jMenuItem_startSim;
    private javax.swing.JMenuItem jMenuItem_stopSim;
    private javax.swing.JMenu jMenu_File;
    private javax.swing.JMenu jMenu_Help;
    private javax.swing.JMenu jMenu_console;
    private javax.swing.JMenu jMenu_sim;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane_TabInterface;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables

    
    private String[] getGUIState(){
        int i = 0;
        String sep = System.lineSeparator(); // системный символ перевода строки, "\n"
        String[] res = new String[12];
        
        res[i++] =  jComboBox1.getName() + " ";
        
        res[i++] = (String)(jComboBox1.getSelectedItem()) + sep;
        
        res[i++] =  jComboBox2.getName() + " ";
        
        res[i++] = (String)(jComboBox2.getSelectedItem())+ sep;
        
        res[i++] =  jComboBox3.getName() + " ";
        
        res[i++] = (String)(jComboBox3.getSelectedItem())+ sep;
        
        res[i++] =  jComboBox_MotoPrior.getName() + " ";
        
        res[i++] = (String)(jComboBox_MotoPrior.getSelectedItem()+ sep);
        
        res[i++] =  jComboBox_CarPrior.getName() + " ";
        
        res[i++] = (String)(jComboBox_CarPrior.getSelectedItem()+ sep);
       
        if(jRadioButton1.isSelected()){
            res[i++] = jRadioButton1.getName() + " 1"+ sep;
        }
        
        if(jRadioButton2.isSelected()){
            res[i++] = jRadioButton2.getName() + " 1"+ sep;
        }
        
        return res;
    }
    
    
    private boolean setGUIState(String[] arrset){
        
        for(String s: arrset){
            StringTokenizer tok = new StringTokenizer(s, " ");
            String param = tok.nextToken();
            String value = tok.nextToken();
            
           if(param.contains("вероятность_появления_машины")){
//                if(value.endsWith("%")){
//                   value = value.substring(0, value.length()-1);
//                   
//                }
                value = value.substring(0, value.length()-1);
                jComboBox1.setSelectedItem(value);
           }
           
           if(param.contains("вероятность_появления_мотоцикла")){
                value = value.substring(0, value.length()-1);
                jComboBox2.setSelectedItem(value);
           }
           
           if(param.contains("период_рождения_мс")){
                value = value.substring(0, value.length()-1);
                jComboBox3.setSelectedItem(value);
           }
           
           if(param.contains("мотоцикл_приоритет")){
                value = value.substring(0, value.length()-1);
                jComboBox_MotoPrior.setSelectedItem(value);
           }
           
           if(param.contains("машина_приоритет")){
                value = value.substring(0, value.length()-1);
                jComboBox_CarPrior.setSelectedItem(value);
           }
           
           if(param.contains("скрыть_таймер")){
                //value = value.substring(0, value.length()-1);
                if(!"0".equals(value)){
                    jRadioButton2.setSelected(true);//радио_кнопка "скрыть таймер"
                    jRadioButton1.setSelected(false); // радио_кнопка "показать таймер"
                    jRadioButton2.doClick();
                }else{
                    jRadioButton2.setSelected(false);//радио_кнопка "скрыть таймер"
                    jRadioButton1.setSelected(true); // радио_кнопка "показать таймер"
                    jRadioButton1.doClick();
                }
           }
           
           if(param.contains("показать_таймер")){
                //value = value.substring(0, value.length()-1);
                if(!"0".equals(value)){
                    jRadioButton2.setSelected(false);//радио_кнопка "скрыть таймер"
                    jRadioButton1.setSelected(true); // радио_кнопка "показать таймер"
                    jRadioButton1.doClick();
                }else{
                    jRadioButton2.setSelected(true);//радио_кнопка "скрыть таймер"
                    jRadioButton1.setSelected(false); // радио_кнопка "показать таймер"
                    jRadioButton2.doClick();
                }
           }
        }
        return true;
    }

    /*private*/ synchronized void renewFriendsList(ArrayList<ClientDescriptor> friendsList,ClientDescriptor my_cld) {
        
        DefaultListModel model = new DefaultListModel();
        
        
        for(Iterator<ClientDescriptor> it = friendsList.iterator();it.hasNext();){
            ClientDescriptor cld = it.next();
            
            // если нашёл свой собственный описатель, не вносить его в отображающую модель
            if(cld.getMaster_id().equals(my_cld.getMaster_id()))continue; 
            
            model.addElement(cld.getMaster_name() + cld.getMaster_id());
        }
        
//        ListModel modelL = jList_network_friends.getModel();
//        
//        for(int i=0;i<modelL.getSize();i++)
//            model.addElement(modelL.getElementAt(i));
               
        jList_network_friends.setModel(model);
    }
}

